{"version":3,"sources":["components/Pets/pets.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["pets","props","react_default","a","createElement","className","onClick","activeClick","id","src","image","Wrapper","children","shuffle","array","i","length","j","Math","floor","random","_ref","App","state","score","total","visited","_this","includes","setState","push","correctNumbers","Set","size","_this2","this","components_Wrapper_Wrapper","reactstrap_es","map","item","components_Pets_pets","_id","xs","sm","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAaeA,SAVF,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC5DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,MAAOF,GAAIP,EAAMO,SCDrBG,SAFC,SAAAV,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMW,2BCQrDC,SAAU,SAACC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,IA6EMQ,6MApEbC,MAAQ,CACNC,MAAO,EACPC,MAAO,EACPC,QAAS,GACT1B,KAAMa,EAAQb,MAKhBO,YAAc,SAACC,GACCmB,EAAKJ,MAAMG,QACdE,SAASpB,IAClBmB,EAAKE,SAAS,CACZL,MAAO,EACPC,MAAOE,EAAKJ,MAAME,MAClBC,QAAS,KAGbC,EAAKJ,MAAMG,QAAQI,KAAKtB,GACxB,IAAIuB,EAAkB,IAAIC,IAAIL,EAAKJ,MAAMG,SAAUO,KACnDN,EAAKJ,MAAMC,MAAQO,EAChBA,EAAiBJ,EAAKJ,MAAME,QAC7BE,EAAKJ,MAAME,OAAS,GAGtBE,EAAKE,SAAS,CAAC7B,KAAMa,EAAQb,8EAItB,IAAAkC,EAAAC,KACP,OAEEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,gGACAF,EAAAC,EAAAC,cAACgC,EAAD,KAEElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACAnC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACMnC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KAECF,KAAKZ,MAAMvB,KAAKsC,IAAI,SAAAC,GAAI,OAEvBrC,EAAAC,EAAAC,cAACoC,EAAD,CACA9B,MAAO6B,EAAK7B,MACZF,GAAI+B,EAAKE,IACTlC,YAAa2B,EAAK3B,oBAQ5BL,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKK,GAAG,IAAIC,GAAG,KAAIzC,EAAAC,EAAAC,cAAA,mCACnBF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKK,GAAG,IAAIC,GAAG,KAAIzC,EAAAC,EAAAC,cAAA,yBAAiB+B,KAAKZ,MAAMC,QAC/CtB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKM,GAAG,KAAIzC,EAAAC,EAAAC,cAAA,wBAAgB+B,KAAKZ,MAAME,MAA3B,KAAZ,eA7DMmB,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de3de1f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./pets.css\";\r\n\r\nconst pets = props =>(\r\n\t<div className=\"card\" onClick={() => props.activeClick(props.id)}>\r\n\t\t<div className=\"img-container\">\r\n\t\t\t<img src={props.image} id={props.id}/>\r\n\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\n\r\nexport default pets;\r\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React, {Component} from \"react\";\nimport { Container, \n        Row, \n        Col} from 'reactstrap';\n\nimport Pets from \"./components/Pets\";\nimport Wrapper from \"./components/Wrapper\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport pets from \"./pets.json\";\nimport \"./App.css\";\n\nlet shuffle = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nlet refresh = () => {\n  window.location.reload();\n}\n  \nclass App extends Component {\n\n  state = {\n    score: 0,\n    total: 0,\n    visited: [],\n    pets: shuffle(pets)\n  }\n\n\n\n  activeClick = (id) => {\n    let visited = this.state.visited;\n    if(visited.includes(id)){\n      this.setState({\n        score: 0,\n        total: this.state.total,\n        visited: []\n      });\n    }\n    this.state.visited.push(id);\n    let correctNumbers = (new Set(this.state.visited)).size;\n    this.state.score = correctNumbers;\n    if(correctNumbers > this.state.total){\n      this.state.total += 1;\n    }\n    \n    this.setState({pets: shuffle(pets)});\n  }\n\n\n  render() {\n    return (\n\n      <div className=\"text-center\">\n\n        <h1>Clicky Game</h1>\n        <h2>Click on an image to begin and earn points, but don't click on any more than once!</h2>\n        <Wrapper>\n          \n          <Container>\n          <Col>\n                <Row>\n                \n                {this.state.pets.map(item =>(\n\n                  <Pets \n                  image={item.image}\n                  id={item._id}\n                  activeClick={this.activeClick}\n                  />\n                ))}\n               \n                </Row>\n                 </Col>\n          </Container>\n        </Wrapper>\n        <Container>\n          <Row>\n            <Col xs=\"6\" sm=\"4\"><h3>Memorize the images!</h3></Col>\n            <Col xs=\"6\" sm=\"4\"><h3>Your Score: {this.state.score}</h3></Col>\n            <Col sm=\"4\"><h3>Top Score: {this.state.total} </h3> </Col>\n          </Row>\n        </Container>\n      </div> \n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}